Index: part_9/part_9.6/task_9.6.11.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Гвидо, засевший за компьютером и не ведущий активный образ жизни, «немного» поднабрал в весе.\r\n# Осталось всего 60 дней до лета, а хочется быть в форме. Вот Гвидо и решился на похудение.\r\n# Все дни до лета он пронумеровал от 1 до 60 (включительно). Перед началом похудения у Гвидо был вес 100 кг,\r\n# а своей целью он поставил достичь веса 88 кг (или меньше).\r\n# Он решил худеть на одну и ту же массу ежедневно.\r\n# Напишите программу, которая принимает на вход текущий день и текущий вес Гвидо.\r\n# Программа должна вывести фразу:\r\n# «Все идет по плану» (без кавычек), если Гвидо удаётся держать планку в похудении и его вес ниже либо равен тому,\r\n# который он запланировал на текущий день\r\n# «Что-то пошло не так» (без кавычек), если Гвидо не очень старается и его вес выше того, который он запланировал на текущий день\r\n# Также программа должна вывести информацию о номере дня похудения, текущем весе Гвидо и цели по весу на текущий день в формате:\r\n# #<номер дня> ДЕНЬ: ТЕКУЩИЙ ВЕС = <текущий вес Гвидо> кг, ЦЕЛЬ по ВЕСУ = <цель по весу на текущий день> кг\r\n\r\nday_loss = int(input())\r\ncurrent_weight = float(input())\r\ngoal_day = 100 - 0.2 * day_loss\r\n\r\nif abs(100 - current_weight) / day_loss <= 0.2:\r\n    print('Something went wrong')\r\n    print(f'#{day_loss} DAY: CURRENT WEIGHT = {current_weight} kg, WEIGHT GOAL = {goal_day} kg')\r\nelse:\r\n    print('Everything is going according to plan')\r\n    print(f'#{day_loss} DAY: CURRENT WEIGHT = {current_weight} kg, WEIGHT GOAL = {goal_day} kg')
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/part_9/part_9.6/task_9.6.11.py b/part_9/part_9.6/task_9.6.11.py
--- a/part_9/part_9.6/task_9.6.11.py	(revision 4134154d422eb4aac8dbc7ad0d6f55cab7c647ff)
+++ b/part_9/part_9.6/task_9.6.11.py	(date 1728462030334)
@@ -17,7 +17,7 @@
 
 if abs(100 - current_weight) / day_loss <= 0.2:
     print('Something went wrong')
-    print(f'#{day_loss} DAY: CURRENT WEIGHT = {current_weight} kg, WEIGHT GOAL = {goal_day} kg')
 else:
     print('Everything is going according to plan')
-    print(f'#{day_loss} DAY: CURRENT WEIGHT = {current_weight} kg, WEIGHT GOAL = {goal_day} kg')
\ No newline at end of file
+
+print(f'#{day_loss} DAY: CURRENT WEIGHT = {current_weight} kg, WEIGHT GOAL = {goal_day} kg')
\ No newline at end of file
Index: part_9/part_9.8/task_9.8.16.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Все книги в домашней библиотеке Душнилы, друга Сэма, должны быть обязательно отсортированы по возрастанию:\r\n# сначала по фамилиям авторов, а в случае совпадения фамилий – по названиям.\r\n# Напишите программу, которая проверяет, верно ли отсортированы книги.\r\n# На вход вашей программе поступает число n, а затем – n строк, каждая строка представляет собой книгу в следующем формате:\r\n# <фамилия автора> <инициалы автора>, «<название книги>»\r\n# Программа должна вывести «YES» (без кавычек), если книги отсортированы в соответствии с пожеланиями Душнилы,\r\n# или «NO» (без кавычек) в противном случае.\r\n\r\n# Примечание 1. Обратите внимание, что Душнила игнорирует инициалы автора при сортировке книг.\r\n# Примечание 2. Гарантируется, что книги в наборе не повторяются.\r\n# Примечание 3. Гарантируется, что фамилия автора состоит из одного слова.\r\n\r\nnumber = int(input())\r\n\r\nauthor = []\r\n\r\nfor i in range(number):\r\n    author_book = input()\r\n    author_book = author_book.replace(author_book[(author_book.find(',') - 5):(author_book.find(','))], '') # delete initials\r\n    author.append(author_book)\r\n\r\nif author == sorted(author):\r\n    print('YES')\r\nelse:\r\n    print('NO')
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/part_9/part_9.8/task_9.8.16.py b/part_9/part_9.8/task_9.8.16.py
--- a/part_9/part_9.8/task_9.8.16.py	(revision 4134154d422eb4aac8dbc7ad0d6f55cab7c647ff)
+++ b/part_9/part_9.8/task_9.8.16.py	(date 1728462030327)
@@ -10,16 +10,34 @@
 # Примечание 2. Гарантируется, что книги в наборе не повторяются.
 # Примечание 3. Гарантируется, что фамилия автора состоит из одного слова.
 
+# number = int(input())
+#
+# author = []
+#
+# for i in range(number):
+#     author_book = input()
+#     author_book = author_book.replace(author_book[(author_book.find(',') - 5):(author_book.find(','))], '') # delete initials
+#     author.append(author_book)
+#
+# if author == sorted(author):
+#     print('YES')
+# else:
+#     print('NO')
+
 number = int(input())
 
-author = []
+book = input()
+book = book.replace(book[(book.find(',') - 5):(book.find(','))], '')
 
-for i in range(number):
-    author_book = input()
-    author_book = author_book.replace(author_book[(author_book.find(',') - 5):(author_book.find(','))], '') # delete initials
-    author.append(author_book)
-
-if author == sorted(author):
-    print('YES')
+for i in range(number - 1):
+    book_next = input()
+    book_next = book_next.replace(book_next[(book_next.find(',') - 5):(book_next.find(','))], '')
+    if book > book_next:
+        print('NO')
+        break
+    book = book_next
 else:
-    print('NO')
\ No newline at end of file
+    print('YES')
+
+
+
Index: part_9/part_9.4/task_9.4.14.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># На вход программе подаётся строка текста.\r\n# Если в этой строке буква «f» встречается только один раз, выведите её индекс.\r\n# Если она встречается два и более раза,\r\n# выведите индексы её первого и последнего вхождения на одной строке, разделённые символом пробела.\r\n# Если буква «f» в данной строке не встречается, следует вывести «NO».\r\n\r\nstring = input()\r\n\r\nif string.count('f') == 1:\r\n    print(string.find('f'))\r\nelif string.count('f') >= 2:\r\n    print(string.find('f'), string.rfind('f'))\r\nelif string.find('f') == -1:\r\n    print('NO')\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/part_9/part_9.4/task_9.4.14.py b/part_9/part_9.4/task_9.4.14.py
--- a/part_9/part_9.4/task_9.4.14.py	(revision 4134154d422eb4aac8dbc7ad0d6f55cab7c647ff)
+++ b/part_9/part_9.4/task_9.4.14.py	(date 1728462030341)
@@ -10,6 +10,6 @@
     print(string.find('f'))
 elif string.count('f') >= 2:
     print(string.find('f'), string.rfind('f'))
-elif string.find('f') == -1:
+else:
     print('NO')
 
Index: part_9/part_9.4/task_9.4.9.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># На вход программе подается строка генетического кода, состоящая из букв А (аденин), Г (гуанин), Ц (цитозин), Т (тимин).\r\n# Напишите программу, которая подсчитывает сколько аденина, гуанина, цитозина и тимина входит в данную строку генетического кода.\r\n\r\nstring = input()\r\nlower_case = string.lower()\r\n\r\nprint('Adenine:', lower_case.count('а'))\r\nprint('Guanine:', lower_case.count('г'))\r\nprint('Cytosine:', lower_case.count('ц'))\r\nprint('Timin:', lower_case.count('т'))
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/part_9/part_9.4/task_9.4.9.py b/part_9/part_9.4/task_9.4.9.py
--- a/part_9/part_9.4/task_9.4.9.py	(revision 4134154d422eb4aac8dbc7ad0d6f55cab7c647ff)
+++ b/part_9/part_9.4/task_9.4.9.py	(date 1728462030348)
@@ -1,8 +1,7 @@
 # На вход программе подается строка генетического кода, состоящая из букв А (аденин), Г (гуанин), Ц (цитозин), Т (тимин).
 # Напишите программу, которая подсчитывает сколько аденина, гуанина, цитозина и тимина входит в данную строку генетического кода.
 
-string = input()
-lower_case = string.lower()
+lower_case = input().lower()
 
 print('Adenine:', lower_case.count('а'))
 print('Guanine:', lower_case.count('г'))
Index: part_9/part_9.8/task_9.8.11.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># На вход программе подается последовательность строк, каждая строка на отдельной строке.\r\n# Концом последовательности является слово «КОНЕЦ» (без кавычек).\r\n# При этом само слово «КОНЕЦ» не входит в последовательность, лишь символизируя ее окончание.\r\n# Напишите программу, которая находит в данной последовательности максимальную и минимальную строки\r\n# (в лексикографическом порядке) и выводит их в следующем формате:\r\n# Минимальная строка ⬇\uFE0F: <минимальная строка>\r\n# Максимальная строка ⬆\uFE0F: <максимальная строка>\r\n\r\nall_string = []\r\n\r\nwhile True:\r\n    string = input()\r\n    if string == 'THE END':\r\n        break\r\n    all_string.append(string)\r\n\r\nif all_string:\r\n    min_string = min(all_string)\r\n    max_string = max(all_string)\r\n    print(f'Minimum line ⬇\uFE0F: {min_string}')\r\n    print(f'Max line ⬆\uFE0F: {max_string}')\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/part_9/part_9.8/task_9.8.11.py b/part_9/part_9.8/task_9.8.11.py
--- a/part_9/part_9.8/task_9.8.11.py	(revision 4134154d422eb4aac8dbc7ad0d6f55cab7c647ff)
+++ b/part_9/part_9.8/task_9.8.11.py	(date 1728462030355)
@@ -6,19 +6,34 @@
 # Минимальная строка ⬇️: <минимальная строка>
 # Максимальная строка ⬆️: <максимальная строка>
 
-all_string = []
+# all_string = []
+#
+# while True:
+#     string = input()
+#     if string == 'THE END':
+#         break
+#     all_string.append(string)
+#
+# if all_string:
+#     min_string = min(all_string)
+#     max_string = max(all_string)
+#     print(f'Minimum line ⬇️: {min_string}')
+#     print(f'Max line ⬆️: {max_string}')
 
-while True:
+string = input()
+
+max_string = string
+min_string = string
+
+while string != 'THE END':
+    if string < min_string:
+        min_string = string
+    if string > max_string:
+        max_string = string
+
     string = input()
-    if string == 'THE END':
-        break
-    all_string.append(string)
 
-if all_string:
-    min_string = min(all_string)
-    max_string = max(all_string)
-    print(f'Minimum line ⬇️: {min_string}')
-    print(f'Max line ⬆️: {max_string}')
+
+print(f'Minimum line ⬇️: {min_string}')
+print(f'Max line ⬆️: {max_string}')
 
-
-
Index: part_9/part_9.8/task_9.8.12.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># В некотором наборе слов Сэм находит \"волшебное\" число по следующему алгоритму:\r\n# берет самую \"маленькую\" и самую \"большую\" строки, перемножает Unicode-коды последних символов этих строк и\r\n# возводит полученное число в квадрат. Результатом и является \"волшебное\" число.\r\n# На вход программе подаются 4 слова. Найдите \"волшебное\" число в этом наборе слов.\r\n\r\nlist_string = []\r\n\r\nfor i in range(4):\r\n    string = input()\r\n    list_string.append(string)\r\n\r\nif list_string:\r\n    max_string = max(list_string)\r\n    min_string = min(list_string)\r\n    max_number = ord(max_string[-1])\r\n    min_number = ord(min_string[-1])\r\n    print((max_number * min_number) ** 2)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/part_9/part_9.8/task_9.8.12.py b/part_9/part_9.8/task_9.8.12.py
--- a/part_9/part_9.8/task_9.8.12.py	(revision 4134154d422eb4aac8dbc7ad0d6f55cab7c647ff)
+++ b/part_9/part_9.8/task_9.8.12.py	(date 1728462030362)
@@ -3,15 +3,26 @@
 # возводит полученное число в квадрат. Результатом и является "волшебное" число.
 # На вход программе подаются 4 слова. Найдите "волшебное" число в этом наборе слов.
 
-list_string = []
+# list_string = []
+#
+# for i in range(4):
+#     string = input()
+#     list_string.append(string)
+#
+# if list_string:
+#     max_string = max(list_string)
+#     min_string = min(list_string)
+#     max_number = ord(max_string[-1])
+#     min_number = ord(min_string[-1])
+#     print((max_number * min_number) ** 2)
 
-for i in range(4):
-    string = input()
-    list_string.append(string)
 
-if list_string:
-    max_string = max(list_string)
-    min_string = min(list_string)
-    max_number = ord(max_string[-1])
-    min_number = ord(min_string[-1])
-    print((max_number * min_number) ** 2)
+string1, string2, string3, string4 = input(), input(), input(), input()
+
+max_string = max(string1, string2, string3, string4)
+min_string = min(string1, string2, string3, string4)
+max_number = ord(max_string[-1])
+min_number = ord(min_string[-1])
+print((max_number * min_number) ** 2)
+
+
Index: part_9/part_9.8/task_9.8.13.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># В школе BEEGEEK названия учебных классов необычные. Они имеют следующий формат:\r\n# <номер класса><буква класса>\r\n# где <номер класса> должен находиться в диапазоне от 0 (как и все у программистов) до 9 включительно,\r\n# а буквой класса могут быть все буквы в диапазоне от «А» до «П» включительно.\r\n# Напишите программу, которая принимает натуральное число\r\n# n, а далее n названий классов, каждое на новой строке.\r\n# Для каждого названия класса ваша программа должна выводить на отдельной строке «YES» (без кавычек),\r\n# если название класса корректное, или «NO» (без кавычек) в противном случае.\r\n\r\nnumbers = int(input())\r\nletters = 'АБВГДЕЖЗИЙКЛМНОП'\r\nclass_names = []\r\n\r\nfor i in range(numbers):\r\n    class_name = input()\r\n    class_names.append(class_name)\r\n\r\nfor class_name in class_names:\r\n    if len(class_name) == 2 and class_name[0].isdigit() and class_name[1] in letters:\r\n        print('YES')\r\n    else:\r\n        print('NO')
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/part_9/part_9.8/task_9.8.13.py b/part_9/part_9.8/task_9.8.13.py
--- a/part_9/part_9.8/task_9.8.13.py	(revision 4134154d422eb4aac8dbc7ad0d6f55cab7c647ff)
+++ b/part_9/part_9.8/task_9.8.13.py	(date 1728462030368)
@@ -7,16 +7,26 @@
 # Для каждого названия класса ваша программа должна выводить на отдельной строке «YES» (без кавычек),
 # если название класса корректное, или «NO» (без кавычек) в противном случае.
 
+# numbers = int(input())
+# letters = 'АБВГДЕЖЗИЙКЛМНОП'
+# class_names = []
+#
+# for i in range(numbers):
+#     class_name = input()
+#     class_names.append(class_name)
+#
+# for class_name in class_names:
+#     if len(class_name) == 2 and class_name[0].isdigit() and class_name[1] in letters:
+#         print('YES')
+#     else:
+#         print('NO')
+
 numbers = int(input())
 letters = 'АБВГДЕЖЗИЙКЛМНОП'
-class_names = []
 
 for i in range(numbers):
     class_name = input()
-    class_names.append(class_name)
-
-for class_name in class_names:
     if len(class_name) == 2 and class_name[0].isdigit() and class_name[1] in letters:
         print('YES')
     else:
-        print('NO')
\ No newline at end of file
+        print('NO')
Index: part_9/part_9.8/task_9.8.15.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># На вход программе подаются 3 различных слова.\r\n# Вам необходимо отсортировать эти слова по возрастанию в лексикографическом порядке\r\n# и вывести их на одной строке, разделяя символом пробела.\r\n\r\nlist_string = []\r\n\r\nfor i in range(3):\r\n    string = input()\r\n    list_string.append(string)\r\n\r\nlist_string = sorted(list_string)\r\n\r\n\r\nprint(*list_string)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/part_9/part_9.8/task_9.8.15.py b/part_9/part_9.8/task_9.8.15.py
--- a/part_9/part_9.8/task_9.8.15.py	(revision 4134154d422eb4aac8dbc7ad0d6f55cab7c647ff)
+++ b/part_9/part_9.8/task_9.8.15.py	(date 1728462030375)
@@ -2,13 +2,24 @@
 # Вам необходимо отсортировать эти слова по возрастанию в лексикографическом порядке
 # и вывести их на одной строке, разделяя символом пробела.
 
-list_string = []
+# list_string = []
+#
+# for i in range(3):
+#     string = input()
+#     list_string.append(string)
+#
+# list_string = sorted(list_string)
+#
+#
+# print(*list_string)
 
-for i in range(3):
-    string = input()
-    list_string.append(string)
+word1, word2, word3 = input(), input(), input()
 
-list_string = sorted(list_string)
+max_word = max(word1, word2, word3)
+min_word = min(word1, word2, word3)
 
+total = word1 + word2 + word3
+delete_min = total.replace(min_word, '')
+delete_max = delete_min.replace(max_word,'')
 
-print(*list_string)
\ No newline at end of file
+print(min_word, delete_max, max_word)
\ No newline at end of file
Index: part_9/part_9.5/task_9.5.9.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># На платформе Stepik пользователи оставляют комментарии, но не все из них соответствуют правилам.\r\n# Так, например, модератор Сэм считает неуместными комментарии те,\r\n# которые представляют собой пустую строку или состоят только из пробелов.\r\n# Подобные комментарии он удаляет – нечего засорять курс бесполезным материалом!\r\n# Ваша задача – написать программу, которая поможет Сэму проверять комментарии.\r\n# Программа должна принимать на вход натуральное число n, а затем n строк, представляющих тексты комментариев.\r\n# Для каждого комментария ваша программа должна выводить номер этого комментария (начиная с 1),\r\n# затем двоеточие (:), затем через пробел его текст или сообщение «COMMENT SHOULD BE DELETED» (без кавычек),\r\n# если комментарий должен быть удалён Сэмом.\r\n\r\nn = int(input())\r\n\r\nfor i in range(1, n + 1):\r\n    comment = input()\r\n    if comment.isspace() or comment == '':\r\n        print(i, ':', ' COMMENT SHOULD BE DELETED', sep='')\r\n    else:\r\n        print(i, ':', ' ', comment, sep='')\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/part_9/part_9.5/task_9.5.9.py b/part_9/part_9.5/task_9.5.9.py
--- a/part_9/part_9.5/task_9.5.9.py	(revision 4134154d422eb4aac8dbc7ad0d6f55cab7c647ff)
+++ b/part_9/part_9.5/task_9.5.9.py	(date 1728462030384)
@@ -13,6 +13,6 @@
 for i in range(1, n + 1):
     comment = input()
     if comment.isspace() or comment == '':
-        print(i, ':', ' COMMENT SHOULD BE DELETED', sep='')
-    else:
-        print(i, ':', ' ', comment, sep='')
+        comment = 'COMMENT SHOULD BE DELETED'
+
+    print(i, ': ', comment, sep='')
Index: part_9/part_9.4/task_9.4.10.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Джим Хоппер с помощью радиоприемника пытается получить сообщение Оди.\r\n# На приёмник ему поступает n различных последовательностей кода Морзе.\r\n# Декодировав их, он получает последовательности из цифр и букв строчного латинского алфавита.\r\n# При этом только в сообщениях Оди содержится число 11, причём минимум 3 раза.\r\n# Помогите определить Джиму количество сообщений от Оди.\r\n\r\nn = int(input()) # message number\r\ntotal_11 = 0\r\n\r\nfor i in range(n):\r\n    string = input()\r\n    if string.count('11') >= 3:\r\n        total_11 += 1\r\nprint(total_11)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/part_9/part_9.4/task_9.4.10.py b/part_9/part_9.4/task_9.4.10.py
--- a/part_9/part_9.4/task_9.4.10.py	(revision 4134154d422eb4aac8dbc7ad0d6f55cab7c647ff)
+++ b/part_9/part_9.4/task_9.4.10.py	(date 1728462030391)
@@ -5,10 +5,10 @@
 # Помогите определить Джиму количество сообщений от Оди.
 
 n = int(input()) # message number
-total_11 = 0
+total_messages = 0
 
 for i in range(n):
     string = input()
     if string.count('11') >= 3:
-        total_11 += 1
-print(total_11)
+        total_messages += 1
+print(total_messages)
