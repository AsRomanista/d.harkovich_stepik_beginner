Index: part_11/part_11.7/task_11.7.8.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/part_11/part_11.7/task_11.7.8.py b/part_11/part_11.7/task_11.7.8.py
new file mode 100644
--- /dev/null	(date 1728461229196)
+++ b/part_11/part_11.7/task_11.7.8.py	(date 1728461229196)
@@ -0,0 +1,8 @@
+# На вход программе подается строка текста, содержащая целые числа.
+# Напишите программу, использующую списочное выражение, которая выведет кубы указанных чисел также на одной строке.
+
+string = input().split()
+
+list_number = [int(digit) ** 3 for digit in string]
+
+print(*list_number)
\ No newline at end of file
Index: part_11/part_11.7/task_11.7.9.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/part_11/part_11.7/task_11.7.9.py b/part_11/part_11.7/task_11.7.9.py
new file mode 100644
--- /dev/null	(date 1728461229196)
+++ b/part_11/part_11.7/task_11.7.9.py	(date 1728461229196)
@@ -0,0 +1,4 @@
+# На вход программе подается строка текста, содержащая слова.
+# Напишите программу, которая выводит слова введенной строки в столбик.
+
+print(*input().split(), sep='\n')
\ No newline at end of file
Index: part_11/part_11.7/task_11.7.10.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/part_11/part_11.7/task_11.7.10.py b/part_11/part_11.7/task_11.7.10.py
new file mode 100644
--- /dev/null	(date 1728461229193)
+++ b/part_11/part_11.7/task_11.7.10.py	(date 1728461229193)
@@ -0,0 +1,5 @@
+# На вход программе подается строка текста.
+# Напишите программу, использующую списочное выражение, которая выводит все цифровые символы данной строки.
+from unicodedata import digit
+
+print(''.join([digit for digit in input() if digit in '0123456789']))
\ No newline at end of file
Index: part_11/part_11.7/task_11.7.11.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/part_11/part_11.7/task_11.7.11.py b/part_11/part_11.7/task_11.7.11.py
new file mode 100644
--- /dev/null	(date 1728461229194)
+++ b/part_11/part_11.7/task_11.7.11.py	(date 1728461229194)
@@ -0,0 +1,7 @@
+# На вход программе подаётся строка текста, содержащая целые числа.
+# Напишите программу, использующую списочное выражение, которая выведет квадраты чётных чисел,
+# кроме тех квадратов, которые оканчиваются на цифру 4
+from unicodedata import digit
+
+print(*[int(digit) ** 2 for digit in input().split() if int(digit) % 2 == 0 and int(digit) ** 2 % 10 != 4])
+
Index: part_11/part_11.8/task_11.8.4.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/part_11/part_11.8/task_11.8.4.py b/part_11/part_11.8/task_11.8.4.py
new file mode 100644
--- /dev/null	(date 1728461229197)
+++ b/part_11/part_11.8/task_11.8.4.py	(date 1728461229197)
@@ -0,0 +1,17 @@
+# Оптимизируйте приведенный код, реализующий алгоритм пузырьковой сортировки.
+
+a = [17, 24, 91, 96, 67, -27, 79, -71, -71, 58, 48, 88, 88, -16, -78, 96, -76, 56, 92, 1, 32, -17, 36, 88, -61, -97, -37, -84, 50, 47, 94, -6, 52, -76, 93, 14, -32, 98, -65, -16, -9, -68, -20, -40, -71, 93, -91, 44, 25, 79, 97, 0, -94, 7, -47, -96, -55, -58, -78, -78, -79, 75, 44, -56, -41, 38, 16, 70, 17, -17, -24, -83, -74, -73, 11, -26, 63, -75, -19, -13, -51, -74, 21, -8, 21, -68, -66, -84, -95, 78, 69, -29, 39, 38, -55, 7, -11, -26, -62, -84]
+
+n = len(a)
+
+for i in range(n - 1):
+    flag = False
+    for j in range(n - i - 1):
+        if a[j] > a[j + 1]:
+            a[j], a[j + 1] = a[j + 1], a[j]
+            flag = True
+
+    if not flag:
+        break
+
+print(a)
\ No newline at end of file
Index: part_11/part_11.8/task_11.8.7.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/part_11/part_11.8/task_11.8.7.py b/part_11/part_11.8/task_11.8.7.py
new file mode 100644
--- /dev/null	(date 1728461229197)
+++ b/part_11/part_11.8/task_11.8.7.py	(date 1728461229197)
@@ -0,0 +1,14 @@
+# Отсортируйте список по возрастанию, реализовав алгоритм сортировки выбором.
+
+a = [78, -32, 5, 39, 58, -5, -63, 57, 72, 9, 53, -1, 63, -97, -21, -94, -47, 57, -8, 60, -23, -72, -22, -79, 90, 96, -41, -71, -48, 84, 89, -96, 41, -16, 94, -60, -64, -39, 60, -14, -62, -19, -3, 32, 98, 14, 43, 3, -56, 71, -71, -67, 80, 27, 92, 92, -64, 0, -77, 2, -26, 41, 3, -31, 48, 39, 20, -30, 35, 32, -58, 2, 63, 64, 66, 62, 82, -62, 9, -52, 35, -61, 87, 78, 93, -42, 87, -72, -10, -36, 61, -16, 59, 59, 22, -24, -67, 76, -94, 59]
+
+n = len(a)
+
+for i in range(len(a) - 1):
+    min_digit = i
+    for j in range(i + 1, len(a)):
+        if a[j] < a[min_digit]:
+            min_digit = j
+    a[i], a[min_digit] = a[min_digit], a[i]
+
+print(a)
\ No newline at end of file
Index: part_12/part_12.2/task_12.2.1.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/part_12/part_12.2/task_12.2.1.py b/part_12/part_12.2/task_12.2.1.py
new file mode 100644
--- /dev/null	(date 1728461229198)
+++ b/part_12/part_12.2/task_12.2.1.py	(date 1728461229198)
@@ -0,0 +1,4 @@
+# На вход программе подается четное число n, n ≥ 2. Напишите программу, которая выводит список четных чисел [2, 4, 6, ..., n].
+
+print([int(digit) for digit in range(2, int(input()) + 1) if int(digit) % 2 == 0])
+
Index: part_12/part_12.2/task_12.2.2.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/part_12/part_12.2/task_12.2.2.py b/part_12/part_12.2/task_12.2.2.py
new file mode 100644
--- /dev/null	(date 1728461229199)
+++ b/part_12/part_12.2/task_12.2.2.py	(date 1728461229199)
@@ -0,0 +1,14 @@
+# На вход программе подаются две строки текста, содержащие целые числа.
+# Из данных строк формируются списки чисел L и M.
+# Напишите программу, которая создает третий список, элементами которого являются суммы соответствующих элементов списков L и M.
+# Далее программа должна вывести каждый элемент полученного списка на одной строке через 1 пробел.
+
+string1 = input().split()
+string2 = input().split()
+
+string3 = [int(string1[i]) + int(string2[i]) for i in range(len(string1))]
+
+print(*string3)
+
+
+
Index: part_12/part_12.2/task_12.2.3.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/part_12/part_12.2/task_12.2.3.py b/part_12/part_12.2/task_12.2.3.py
new file mode 100644
--- /dev/null	(date 1728461229199)
+++ b/part_12/part_12.2/task_12.2.3.py	(date 1728461229199)
@@ -0,0 +1,10 @@
+# На вход программе подается строка текста, содержащая натуральные числа.
+# Напишите программу, которая вставляет между каждым числом знак +, а затем вычисляет сумму полученных чисел.
+
+string = input().split()
+
+numbers = [int(num) for num in string]
+
+string_list = ['+'.join(string)]
+
+print(*string_list, '=', sum(numbers), sep='')
\ No newline at end of file
Index: part_12/part_12.2/task_12.2.4.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/part_12/part_12.2/task_12.2.4.py b/part_12/part_12.2/task_12.2.4.py
new file mode 100644
--- /dev/null	(date 1728461229200)
+++ b/part_12/part_12.2/task_12.2.4.py	(date 1728461229200)
@@ -0,0 +1,25 @@
+# На вход программе подается строка текста.
+# Напишите программу, которая определяет, является ли введенная строка корректным телефонным номером.
+# Строка текста является корректным телефонным номером, если она имеет формат:
+# abc-def-hijk или 7-abc-def-hijk,
+# где a, b, c, d, e, f, h, i, j, k – цифры от [0:9]
+
+string = input().split('-')
+
+if string[0] == '7':
+    del string[0]
+
+if len(string) == 3 and \
+        string[0].isdigit() and len(string[0]) == 3 and \
+        string[1].isdigit() and len(string[1]) == 3 and \
+        string[2].isdigit() and len(string[2]) == 4:
+    print('YES')
+else:
+    print('NO')
+
+
+
+
+
+
+
Index: part_12/part_12.2/task_12.2.5.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/part_12/part_12.2/task_12.2.5.py b/part_12/part_12.2/task_12.2.5.py
new file mode 100644
--- /dev/null	(date 1728461229200)
+++ b/part_12/part_12.2/task_12.2.5.py	(date 1728461229200)
@@ -0,0 +1,8 @@
+# На вход программе подается строка текста.
+# Напишите программу, использующую списочное выражение, которая находит длину самого длинного слова.
+
+string = input().split()
+
+list_max = [len(digit) for digit in string]
+
+print(max(list_max))
\ No newline at end of file
Index: part_12/part_12.2/part_12.2.6.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/part_12/part_12.2/part_12.2.6.py b/part_12/part_12.2/part_12.2.6.py
new file mode 100644
--- /dev/null	(date 1728461229198)
+++ b/part_12/part_12.2/part_12.2.6.py	(date 1728461229198)
@@ -0,0 +1,11 @@
+# На вход программе подается строка текста.
+# Напишите программу, использующую списочное выражение, которая преобразует каждое слово введенного текста в "молодежный жаргон"
+# по следующему правилу:
+# первая буква каждого слова удаляется и ставится в конец слова;
+# затем в конец слова добавляется слог "ки".
+
+string = input().split()
+
+young_slang = [word[1:] + word[0] + 'ки' for word in string]
+
+print(*young_slang)
\ No newline at end of file
Index: part_13/part_13.1/task_13.1.8.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/part_13/part_13.1/task_13.1.8.py b/part_13/part_13.1/task_13.1.8.py
new file mode 100644
--- /dev/null	(date 1728461229201)
+++ b/part_13/part_13.1/task_13.1.8.py	(date 1728461229201)
@@ -0,0 +1,12 @@
+# Напишите функцию draw_box(), которая выводит звездный прямоугольник с размерами 14×10 в соответствии с образцом:
+
+# define function
+def draw_box():
+    for _ in range(14):
+        if _ == 0 or _ == 13:
+            print('*' * 10)
+        else:
+            print('*', ' ' * 8, '*', sep='')
+
+# main program
+draw_box()  # call function
\ No newline at end of file
Index: part_13/part_13.1/task_13.1.9.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/part_13/part_13.1/task_13.1.9.py b/part_13/part_13.1/task_13.1.9.py
new file mode 100644
--- /dev/null	(date 1728461229201)
+++ b/part_13/part_13.1/task_13.1.9.py	(date 1728461229201)
@@ -0,0 +1,11 @@
+# Напишите функцию draw_triangle(), которая выводит звездный прямоугольный треугольник с катетами,
+# равными 10 в соответствии с образцом:
+
+# define function
+def draw_triangle():
+    for i in range(1, 11):
+        print('*' * i)
+
+# main program
+draw_triangle()  # call function
+
Index: part_13/part_13.2/task_13.2.8.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/part_13/part_13.2/task_13.2.8.py b/part_13/part_13.2/task_13.2.8.py
new file mode 100644
--- /dev/null	(date 1728461229202)
+++ b/part_13/part_13.2/task_13.2.8.py	(date 1728461229202)
@@ -0,0 +1,17 @@
+# Напишите функцию draw_triangle(fill, base), которая принимает два параметра:
+# fill – символ заполнитель;
+# base – величина основания равнобедренного треугольника;
+# а затем выводит его.
+
+def draw_triangle(fill, base):
+    for i in range(1, base // 2 + 2):
+        print(fill * i)
+    for i in range(base // 2, 0, -1):
+        print(fill * i)
+
+# input data
+fill = input()
+base = int(input())
+
+# call function
+draw_triangle(fill, base)
\ No newline at end of file
Index: part_13/part_13.2/task_13.2.9.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/part_13/part_13.2/task_13.2.9.py b/part_13/part_13.2/task_13.2.9.py
new file mode 100644
--- /dev/null	(date 1728461229202)
+++ b/part_13/part_13.2/task_13.2.9.py	(date 1728461229202)
@@ -0,0 +1,16 @@
+# Напишите функцию print_fio(name, surname, patronymic), которая принимает три параметра:
+# name – имя человека;
+# surname – фамилия человека;
+# patronymic – отчество человека;
+# а затем выводит на печать ФИО человека.
+
+# define function
+def print_fio(name, surname, patronymic):
+    fio = surname[0] + name[0] + patronymic[0]
+    print(fio.upper())
+
+# input data
+name, surname, patronymic = input(), input(), input()
+
+# call function
+print_fio(name, surname, patronymic)
\ No newline at end of file
Index: part_13/part_13.2/task_13.2.10.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/part_13/part_13.2/task_13.2.10.py b/part_13/part_13.2/task_13.2.10.py
new file mode 100644
--- /dev/null	(date 1728461229202)
+++ b/part_13/part_13.2/task_13.2.10.py	(date 1728461229202)
@@ -0,0 +1,14 @@
+# Напишите функцию print_digit_sum(), которая принимает одно натуральное число num и выводит на печать сумму его цифр.
+
+def print_digit_sum(num):
+    total = 0
+    for i in str(num):
+        total += int(i)
+    print(total)
+
+# input data
+n = int(input())
+
+# call function
+print_digit_sum(n)
+
Index: part_13/part_13.4/task_13.4.6.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/part_13/part_13.4/task_13.4.6.py b/part_13/part_13.4/task_13.4.6.py
new file mode 100644
--- /dev/null	(date 1728461229204)
+++ b/part_13/part_13.4/task_13.4.6.py	(date 1728461229204)
@@ -0,0 +1,10 @@
+# Напишите функцию convert_to_miles(km), которая принимает в качестве аргумента расстояние в километрах
+# и возвращает расстояние в милях.
+# Формула для преобразования: мили = километры * 0.6214
+
+def convert_to_miles(km):
+    return round(km * 0.6214, 4)
+
+num = int(input())
+
+print(convert_to_miles(num))
\ No newline at end of file
Index: part_13/part_13.4/task_13.4.7.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/part_13/part_13.4/task_13.4.7.py b/part_13/part_13.4/task_13.4.7.py
new file mode 100644
--- /dev/null	(date 1728461229204)
+++ b/part_13/part_13.4/task_13.4.7.py	(date 1728461229204)
@@ -0,0 +1,17 @@
+# Напишите функцию get_days(month), которая принимает в качестве аргумента номер месяца и возвращает количество
+# дней в данном месяце.
+
+def get_days(month):
+    if month in [1, 3, 5, 7, 8, 10, 12]:
+        result = 31
+    elif month in [4, 6, 9, 11]:
+        result = 30
+    elif month == 2:
+        result = 28
+
+    return result
+
+
+num = int(input())
+
+print(get_days(num))
\ No newline at end of file
Index: part_13/part_13.4/task_13.4.8.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/part_13/part_13.4/task_13.4.8.py b/part_13/part_13.4/task_13.4.8.py
new file mode 100644
--- /dev/null	(date 1728461229205)
+++ b/part_13/part_13.4/task_13.4.8.py	(date 1728461229205)
@@ -0,0 +1,10 @@
+# Напишите функцию get_factors(num), принимающую в качестве аргумента натуральное число
+# и возвращающую список всех делителей данного числа.
+
+def get_factors(num):
+    result = [divisor for divisor in range(1, num + 1) if num % divisor == 0]
+    return result
+
+n = int(input())
+
+print(get_factors(n))
\ No newline at end of file
Index: part_13/part_13.4/task_13.4.9.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/part_13/part_13.4/task_13.4.9.py b/part_13/part_13.4/task_13.4.9.py
new file mode 100644
--- /dev/null	(date 1728461229205)
+++ b/part_13/part_13.4/task_13.4.9.py	(date 1728461229205)
@@ -0,0 +1,12 @@
+# Напишите функцию number_of_factors(num), принимающую в качестве аргумента число и возвращающую количество делителей данного числа.
+
+def number_of_factors(num):
+    total = 0
+    for i in range(1, num + 1):
+        if num % i == 0:
+            total += 1
+    return total
+
+n = int(input())
+
+print(number_of_factors(n))
\ No newline at end of file
Index: part_13/part_13.4/task_13.4.10.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/part_13/part_13.4/task_13.4.10.py b/part_13/part_13.4/task_13.4.10.py
new file mode 100644
--- /dev/null	(date 1728461229203)
+++ b/part_13/part_13.4/task_13.4.10.py	(date 1728461229203)
@@ -0,0 +1,14 @@
+# Напомним, что строковый метод find('a') возвращает местоположение первого вхождения символа a в строке.
+# Проблема заключается в том, что данный метод не находит местоположение всех символов а.
+# Напишите функцию с именем find_all(target, symbol), которая принимает два аргумента: строку target и символ symbol
+# и возвращает список, содержащий все местоположения этого символа в строке.
+
+def find_all(target, symbol):
+    result = [target_number for target_number in range(len(target)) if target[target_number] == symbol]
+    return result
+
+
+s = input()
+char = input()
+
+print(find_all(s, char))
\ No newline at end of file
Index: part_13/part_13.4/task_13.4.11.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/part_13/part_13.4/task_13.4.11.py b/part_13/part_13.4/task_13.4.11.py
new file mode 100644
--- /dev/null	(date 1728461229203)
+++ b/part_13/part_13.4/task_13.4.11.py	(date 1728461229203)
@@ -0,0 +1,11 @@
+# Напишите функцию merge(list1, list2), которая принимает в качестве аргументов два отсортированных по возрастанию списка,
+# состоящих из целых чисел, и объединяет их в один отсортированный список.
+
+def merge(list1, list2):
+    result = sorted(list1 + list2)
+    return result
+
+numbers1 = [int(c) for c in input().split()]
+numbers2 = [int(c) for c in input().split()]
+
+print(merge(numbers1, numbers2))
\ No newline at end of file
Index: part_13/part_13.4/task_13.4.13.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/part_13/part_13.4/task_13.4.13.py b/part_13/part_13.4/task_13.4.13.py
new file mode 100644
--- /dev/null	(date 1728461229204)
+++ b/part_13/part_13.4/task_13.4.13.py	(date 1728461229204)
@@ -0,0 +1,16 @@
+# На вход программе подается число n, а затем n строк, содержащих целые числа в порядке возрастания.
+# Из данных строк формируются списки чисел. Напишите программу, которая объединяет указанные списки в один отсортированный список
+# с помощью функции quick_merge(), а затем выводит его.
+
+def quick_merge(n):
+    list1 = []
+    for i in range(n):
+        s = input().split()
+        for j in s:
+            list1.append(int(j))
+    list1.sort()
+    return(list1)
+
+num = int(input())
+print(*quick_merge(num))
+
Index: part_13/part_13.5/task_13.5.2.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/part_13/part_13.5/task_13.5.2.py b/part_13/part_13.5/task_13.5.2.py
new file mode 100644
--- /dev/null	(date 1728461229206)
+++ b/part_13/part_13.5/task_13.5.2.py	(date 1728461229206)
@@ -0,0 +1,13 @@
+# Напишите функцию is_valid_triangle(side1, side2, side3),
+# которая принимает в качестве аргументов три натуральных числа, и возвращает значение True,
+# если существует невырожденный треугольник со сторонами side1, side2, side3, или False в противном случае.
+
+def is_valid_triangle(side1, side2, side3):
+    if (side1 + side2) > side3 and (side1 + side3) > side2 and (side2 + side3) > side1:
+        return True
+    else:
+        return False
+
+a, b, c = int(input()), int(input()), int(input())
+
+print(is_valid_triangle(a, b, c))
\ No newline at end of file
Index: part_13/part_13.5/task_13_5_3.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/part_13/part_13.5/task_13_5_3.py b/part_13/part_13.5/task_13_5_3.py
new file mode 100644
--- /dev/null	(date 1728461229207)
+++ b/part_13/part_13.5/task_13_5_3.py	(date 1728461229207)
@@ -0,0 +1,16 @@
+# Напишите функцию is_prime(num), которая принимает в качестве аргумента натуральное число и возвращает значение True,
+# если число является простым, или False в противном случае.
+
+def is_prime(num):
+    result = 0
+    for i in range(1, num + 1):
+        if num % i == 0:
+            result += 1
+    if result == 2:
+        return True
+    else:
+        return False
+
+n = int(input())
+
+print(is_prime(n))
\ No newline at end of file
Index: part_13/part_13.5/task_13.5.4.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/part_13/part_13.5/task_13.5.4.py b/part_13/part_13.5/task_13.5.4.py
new file mode 100644
--- /dev/null	(date 1728461229207)
+++ b/part_13/part_13.5/task_13.5.4.py	(date 1728461229207)
@@ -0,0 +1,14 @@
+# Напишите функцию get_next_prime(num), которая принимает в качестве аргумента натуральное число num
+# и возвращает первое простое число большее числа num.
+
+from task_13_5_3 import is_prime
+
+def get_next_prime(num):
+    num += 1
+    while not is_prime(num):
+        num += 1
+    return num
+
+n = int(input())
+
+print(get_next_prime(n))
\ No newline at end of file
Index: part_13/part_13.5/task_13.5.5.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/part_13/part_13.5/task_13.5.5.py b/part_13/part_13.5/task_13.5.5.py
new file mode 100644
--- /dev/null	(date 1728461229207)
+++ b/part_13/part_13.5/task_13.5.5.py	(date 1728461229207)
@@ -0,0 +1,32 @@
+# Напишите функцию is_password_good(password), которая принимает в качестве аргумента строковое значение пароля password
+# и возвращает значение True, если пароль является надежным и False - в противном случае.
+# Пароль является надежным если:
+# его длина не менее 8 символов;
+# он содержит как минимум одну заглавную букву (верхний регистр);
+# он содержит как минимум одну строчную букву (нижний регистр);
+# он содержит хотя бы одну цифру.
+
+
+def is_password_good(password):
+    if len(password) < 8:
+        return False
+
+    upper_case = False
+    lower_case = False
+    number = False
+
+    for i in password:
+        if i.isupper():
+            upper_case = True
+        elif i.islower():
+            lower_case = True
+        elif i.isdigit():
+            number = True
+    return upper_case and lower_case and number
+
+
+# считываем данные
+txt = input()
+
+# вызываем функцию
+print(is_password_good(txt))
Index: part_11/part_11.7/task_11.7.3.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/part_11/part_11.7/task_11.7.3.py b/part_11/part_11.7/task_11.7.3.py
new file mode 100644
--- /dev/null	(date 1728461229194)
+++ b/part_11/part_11.7/task_11.7.3.py	(date 1728461229194)
@@ -0,0 +1,8 @@
+# Дополните приведенный код, используя списочное выражение так, чтобы получить новый список,
+# содержащий строки исходного списка, где у каждой строки удалён первый символ.
+
+keywords = ['False', 'True', 'None', 'and', 'with', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'try', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'while', 'yield']
+
+new_keywords = [string[1:] for string in keywords]
+
+print(new_keywords)
\ No newline at end of file
Index: part_11/part_11.7/task_11.7.4.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/part_11/part_11.7/task_11.7.4.py b/part_11/part_11.7/task_11.7.4.py
new file mode 100644
--- /dev/null	(date 1728461229194)
+++ b/part_11/part_11.7/task_11.7.4.py	(date 1728461229194)
@@ -0,0 +1,8 @@
+# Дополните приведенный код, используя списочное выражение, так, чтобы получить новый список,
+# содержащий длины строк исходного списка.
+
+keywords = ['False', 'True', 'None', 'and', 'with', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'try', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'while', 'yield']
+
+lengths = [len(string) for string in keywords]
+
+print(lengths)
\ No newline at end of file
Index: part_11/part_11.7/task_11.7.5.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/part_11/part_11.7/task_11.7.5.py b/part_11/part_11.7/task_11.7.5.py
new file mode 100644
--- /dev/null	(date 1728461229195)
+++ b/part_11/part_11.7/task_11.7.5.py	(date 1728461229195)
@@ -0,0 +1,8 @@
+# Дополните приведенный код списочным выражением, чтобы получить новый список,
+# содержащий только слова длиной не менее пяти символов (включительно).
+
+keywords = ['False', 'True', 'None', 'and', 'with', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'try', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'while', 'yield']
+
+new_keywords = [string for string in keywords if len(string) >= 5]
+
+print(new_keywords)
\ No newline at end of file
Index: part_11/part_11.7/task_11.7.6.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/part_11/part_11.7/task_11.7.6.py b/part_11/part_11.7/task_11.7.6.py
new file mode 100644
--- /dev/null	(date 1728461229195)
+++ b/part_11/part_11.7/task_11.7.6.py	(date 1728461229195)
@@ -0,0 +1,6 @@
+# Дополните приведенный код, используя списочное выражение,
+# так, чтобы получить список всех чисел-палиндромов от 100 до 1000 (включительно).
+
+palindromes = [int(digit) for digit in range(100, 1001) if str(digit)[0] == str(digit)[-1]]
+
+print(palindromes)
\ No newline at end of file
Index: part_11/part_11.7/task_11.7.7.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/part_11/part_11.7/task_11.7.7.py b/part_11/part_11.7/task_11.7.7.py
new file mode 100644
--- /dev/null	(date 1728461229196)
+++ b/part_11/part_11.7/task_11.7.7.py	(date 1728461229196)
@@ -0,0 +1,9 @@
+# На вход программе подается натуральное число n.
+# Напишите программу, использующую списочное выражение, которая создает список, содержащий квадраты чисел от 1 до n(включительно),
+# а затем выводит его элементы построчно, то есть каждый на отдельной строке.
+
+number = int(input())
+
+list_number = [digit ** 2 for digit in range(1, number + 1)]
+
+print(*list_number, sep='\n')
\ No newline at end of file
